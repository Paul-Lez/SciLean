import SciLean.Core.Rand.Rand
import SciLean.Core.Integral.RnDeriv

open MeasureTheory

namespace SciLean.Rand

variable
  {R} [RealScalar R] [MeasureSpace R]
  {Œπ} [IndexType Œπ] [LawfulIndexType Œπ] [DecidableEq Œπ]
  {X} [FinVec Œπ R X] [Module ‚Ñù X] [MeasureSpace X]

class UniformRand (X : Type _) where
  uniform : Rand X

def uniform (X : Type _) [UniformRand X] : Rand X := UniformRand.uniform

theorem cintegral_as_uniform_E (R) [RealScalar R] {Y} [AddCommGroup Y] [Module R Y] [Module ‚Ñù Y]
    (f : X ‚Üí Y) (Œº : Measure X) [UniformRand X] :
    ‚à´' (x : X), f x ‚àÇŒº
    =
    (uniform X).ùîº (fun x =>
      let V : R := Scalar.ofENNReal (volume (Set.univ : Set X))
      V ‚Ä¢ f x) := sorry_proof


theorem cintegral_as_uniform_E_in_set (R) [RealScalar R] {Y} [AddCommGroup Y] [SMul R Y] [Module ‚Ñù Y]
    (f : X ‚Üí Y) (A : Set X) [UniformRand A] :
    ‚à´' x in A, f x
    =
    (uniform A).ùîº (fun x =>
      let V : R := Scalar.ofENNReal (volume A)
      V ‚Ä¢ f x) := sorry_proof



class UniformRand' {X : Type _} (A : Set X) [MeasureSpace X] where
  uniform : Rand X
  is_uniform : ‚àÄ x, uniform.‚Ñô.rnDeriv volume x = 1 / volume A

def uniform' {X : Type _} (A : Set X) [MeasureSpace X] [UniformRand' A] : Rand X := UniformRand'.uniform A

theorem integral_as_uniform_E_in_set (R) [RealScalar R]
    {Y} [NormedAddCommGroup Y] [NormedSpace ‚Ñù Y] [NormedSpace R Y]
    (f : X ‚Üí Y) (A : Set X) [UniformRand' A] :
    ‚à´ x in A, f x
    =
    (uniform' A).ùîº (fun x =>
      let V : R := Scalar.ofENNReal (volume A)
      V ‚Ä¢ f x) := sorry_proof


open Set

instance (a b : R) : UniformRand' (Icc a b) where
  uniform := do
    let x ‚Üê uniformI R
    return a + x * (b - a)
  is_uniform := by
    sorry_proof


instance (a b : R) : UniformRand' (Ioo a b) where
  uniform := do
    let x ‚Üê uniformI R
    return a + x * (b - a)
  is_uniform := by
    sorry_proof


instance {Œ±} [MeasureSpace Œ±] {Œ≤} [MeasureSpace Œ≤]
    (A : Set Œ±) [UniformRand' A] (B : Set Œ≤) [UniformRand' B] :
    UniformRand' (A.prod B) where
  uniform := do
    let a ‚Üê uniform' A
    let b ‚Üê uniform' B
    return (a,b)
  is_uniform := by
    sorry_proof


instance {Œ±} [MeasureSpace Œ±] {Œ≤} [MeasureSpace Œ≤]
    (A : Set Œ±) [UniformRand' A] (B : Set Œ≤) [UniformRand' B] :
    UniformRand' (A √óÀ¢ B) := by simp[SProd.sprod]; infer_instance
