import SciLean.Core.Rand.Rand
import SciLean.Core.Transformations.RnDeriv
import SciLean.Core.FloatAsReal
import SciLean.Mathlib.Analysis.AdjointSpace.Geometry
import SciLean.Data.ArrayType.Algebra
import SciLean.Data.DataArray

open MeasureTheory Set

namespace SciLean.Rand

variable
  {R} [RealScalar R] [MeasureSpace R]


class UniformRand {X : Type _} (A : Set X) [MeasureSpace X] where
  uniform : Rand X
  is_uniform : ‚àÄ x, uniform.‚Ñô.rnDeriv volume x = 1 / volume A

def uniform {X : Type _} (A : Set X) [MeasureSpace X] [UniformRand A] : Rand X :=
  UniformRand.uniform A

@[simp, ftrans_simp]
theorem uniform.pdf [MeasureSpace X] (A : Set X) [UniformRand A] :
    (uniform A).pdf R volume
    =
    fun _ => (Scalar.ofENNReal (R:=R) (volume A))‚Åª¬π := by
  unfold Rand.pdf uniform
  simp [UniformRand.is_uniform]
  sorry_proof



----------------------------------------------------------------------------------------------------
-- Integral ----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

theorem integral_eq_E (R) [RealScalar R]
    {X} [MeasureSpace X]
    {Y} [NormedAddCommGroup Y] [NormedSpace ‚Ñù Y] [NormedSpace R Y]
    (r : Rand X) (f : X ‚Üí Y) (Œº : Measure X) /- (hrŒº : r.‚Ñô ‚â™ Œº) -/ :
    ‚à´ x, f x ‚àÇŒº
    =
    r.ùîº (fun x =>
      let pdf := r.pdf R Œº x
      pdf ‚Ä¢ f x) := sorry_proof

theorem integral_eq_uniform_E (R) [RealScalar R]
    {X} [MeasureSpace X]
    {Y} [NormedAddCommGroup Y] [NormedSpace ‚Ñù Y] [NormedSpace R Y]
    (f : X ‚Üí Y) (A : Set X) [UniformRand A] :
    ‚à´ x in A, f x
    =
    (uniform A).ùîº (fun x =>
      let V : R := Scalar.ofENNReal (volume A)
      V ‚Ä¢ f x) := sorry_proof

theorem weakIntegral_as_uniform_E_in_set (R) [RealScalar R]
    {X} [MeasureSpace X]
    {Y} [NormedAddCommGroup Y] [NormedSpace ‚Ñù Y] [NormedSpace R Y]
    (f : X ‚Üí Y) (A : Set X) [UniformRand A] :
    weakIntegral volume f
    =
    (uniform A).ùîº (fun x =>
      let V : R := Scalar.ofENNReal (volume A)
      V ‚Ä¢ f x) := sorry_proof


----------------------------------------------------------------------------------------------------
-- Constructions -----------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

instance {Œ±} [MeasureSpace Œ±] {Œ≤} [MeasureSpace Œ≤]
    (A : Set Œ±) [UniformRand A] (B : Set Œ≤) [UniformRand B] :
    UniformRand (A.prod B) where
  uniform := do
    let a ‚Üê uniform A
    let b ‚Üê uniform B
    return (a,b)
  is_uniform := by
    sorry_proof


instance {Œ±} [MeasureSpace Œ±] {Œ≤} [MeasureSpace Œ≤]
    (A : Set Œ±) [UniformRand A] (B : Set Œ≤) [UniformRand B] :
    UniformRand (A √óÀ¢ B) := by simp[SProd.sprod]; infer_instance



----------------------------------------------------------------------------------------------------
-- Intervals ---------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

-- ugh how to deal with empty intervals ?!

instance (a b : R) : UniformRand (Icc a b) where
  uniform := do
    let x ‚Üê uniformI R
    return a + x * (b - a)
  is_uniform := by
    sorry_proof

instance (a b : R) : UniformRand (Ioo a b) where
  uniform := do
    let x ‚Üê uniformI R
    return a + x * (b - a)
  is_uniform := by
    sorry_proof


instance (a b : R) : UniformRand (Ioc a b) where
  uniform := do
    let x ‚Üê uniformI R
    return a + x * (b - a)
  is_uniform := by
    sorry_proof

instance (a b : R) : UniformRand (Set.Ico a b) where
  uniform := do
    let x ‚Üê uniformI R
    return a + x * (b - a)
  is_uniform := by
    sorry_proof

set_option linter.unusedVariables false in
@[simp, ftrans_simp]
theorem Set.Ioo_volume (a b : R) (_h : a ‚â§ b) :
  (volume (Set.Ioo a b)) = Scalar.toENNReal (b - a) := sorry_proof

set_option linter.unusedVariables false in
@[simp, ftrans_simp]
theorem Set.Ioc_volume (a b : R) (h : a ‚â§ b) :
  (volume (Set.Ioc a b)) = Scalar.toENNReal (b - a) := sorry_proof

set_option linter.unusedVariables false in
@[simp, ftrans_simp]
theorem Set.Ico_volume (a b : R) (h : a ‚â§ b) :
  (volume (Set.Ico a b)) = Scalar.toENNReal (b - a) := sorry_proof

set_option linter.unusedVariables false in
@[simp, ftrans_simp]
theorem Set.Icc_volume (a b : R) (h : a ‚â§ b) :
  (volume (Set.Icc a b)) = Scalar.toENNReal (b - a) := sorry_proof



----------------------------------------------------------------------------------------------------
-- Ball --------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

variable (R)
class RejectionSampleBall‚ÇÇ (X : Type) [NormedAddCommGroup X] [AdjointSpace R X]  where
  sample : Rand X
variable {R}

instance : RejectionSampleBall‚ÇÇ (R:=R) R where
  sample := do
    let x ‚Üê uniformI R
    return 2*x-1

instance
  {X} [NormedAddCommGroup X] [AdjointSpace R X] [RejectionSampleBall‚ÇÇ (R:=R) X]
  {Y} [NormedAddCommGroup Y] [AdjointSpace R Y] [RejectionSampleBall‚ÇÇ (R:=R) Y] :
  RejectionSampleBall‚ÇÇ (R:=R) (X√óY) where

  sample := do
    let go : Rand (Option (X√óY)) := do
      let x ‚Üê RejectionSampleBall‚ÇÇ.sample (R:=R) (X:=X)
      let xnorm2 := ‚Äñx‚Äñ‚ÇÇ¬≤[R]
      if xnorm2 > 1 then return none
      let y ‚Üê RejectionSampleBall‚ÇÇ.sample (R:=R) (X:=Y)
      let ynorm2 := ‚Äñy‚Äñ‚ÇÇ¬≤[R]
      if xnorm2 + ynorm2 > 1 then return none
      return (x,y)

    while true do
      if let .some x ‚Üê go then
        return x
      else
        continue

    return 0

instance
  {I} [IndexType I] [LawfulIndexType I]
  {X} [NormedAddCommGroup X] [AdjointSpace R X] [RejectionSampleBall‚ÇÇ (R:=R) X] [PlainDataType X] :
  RejectionSampleBall‚ÇÇ (R:=R) (X^[I]) where

  sample := do
    let go : Rand (Option (X^[I])) := do

      let mut s : R := 0
      let mut x : X^[I] := 0
      for i in IndexType.univ I do
        let xi ‚Üê RejectionSampleBall‚ÇÇ.sample (R:=R) (X:=X)
        s := s + ‚Äñxi‚Äñ‚ÇÇ¬≤[R]
        if s > 1 then return none
        x[i] := xi

      return x

    while true do
      if let .some x ‚Üê go then
        return x
      else
        continue

    return 0


instance {X} [NormedAddCommGroup X] [AdjointSpace R X] [RejectionSampleBall‚ÇÇ (R:=R) X] [MeasureSpace X]
    (x : X) (r : R) :
    UniformRand (closedBall‚ÇÇ x r) where
  uniform := do
    let y ‚Üê RejectionSampleBall‚ÇÇ.sample (R:=R) (X:=X)
    return r ‚Ä¢ y + x
  is_uniform := sorry_proof
