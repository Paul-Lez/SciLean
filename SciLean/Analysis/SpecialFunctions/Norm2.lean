import SciLean.Analysis.SpecialFunctions.Inner
import SciLean.Analysis.SpecialFunctions.Pow
import SciLean.Meta.GenerateFunProp

namespace SciLean

set_option deprecated.oldSectionVars true
set_option linter.unusedVariables false

variable
  {R : Type*} [RealScalar R]
  {X : Type*} [NormedAddCommGroup X] [NormedSpace R X]
  {U : Type*} [NormedAddCommGroup U] [AdjointSpace R U] [CompleteSpace U]
  {V : Type*} [NormedAddCommGroup V] [AdjointSpace R V] [CompleteSpace V]

def_fun_prop with_transitive : Differentiable R (fun u : U => ‚Äñu‚Äñ‚ÇÇ¬≤[R]) by
  unfold Norm2.norm2; fun_prop [Norm2.norm2]

@[fun_trans]
theorem Norm2.norm2.arg_a0.fderiv_rule :
    fderiv R (fun x : U => ‚Äñx‚Äñ‚ÇÇ¬≤[R])
    =
    fun x => fun dx =>L[R] 2 * ‚ü™dx,x‚ü´[R] := by
  ext x dx
  fun_trans only [norm2_def,ContinuousLinearMap.mk'_eval]
  rw[‚Üê AdjointSpace.conj_symm]
  simp; ring


@[fun_trans]
theorem Norm2.norm2.arg_a0.fwdFDeriv_rule :
    fwdFDeriv R (fun x : U => ‚Äñx‚Äñ‚ÇÇ¬≤[R])
    =
    fun x dx => (‚Äñx‚Äñ‚ÇÇ¬≤[R], 2 *‚ü™dx,x‚ü´[R]) := by
  unfold fwdFDeriv
  fun_trans

@[fun_trans]
theorem Norm2.norm2.arg_a0.revFDeriv_rule :
    revFDeriv R (fun x : U => ‚Äñx‚Äñ‚ÇÇ¬≤[R])
    =
    fun x =>
      (‚Äñx‚Äñ‚ÇÇ¬≤[R], fun dy => (2 * dy) ‚Ä¢ x) := by
  unfold revFDeriv
  fun_trans [smul_smul]

theorem norm2_nonneg (R) [RealScalar R] {X} [NormedAddCommGroup X] [AdjointSpace R X] (x : X) :
    0 ‚â§ ‚Äñx‚Äñ‚ÇÇ¬≤[R] := by
  rw[norm2_def]
  rw[‚Üê AdjointSpace.inner_self_ofReal_re]
  have := AdjointSpace.inner_self_nonneg (ùïú:=R) (x:=x)
  sorry_proof


--  ‚Äñ¬∑‚Äñ‚ÇÇ --------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

def_fun_prop (x : U) (hx : x ‚â† 0) : DifferentiableAt R (norm‚ÇÇ R) x by
  have : ‚Äñx‚Äñ‚ÇÇ¬≤[R] ‚â† 0 := sorry_proof
  unfold norm‚ÇÇ; fun_prop (disch:=aesop)

def_fun_prop (f : X ‚Üí U) (hf : Differentiable R f) (hx' : ‚àÄ x, f x ‚â† 0) :
    Differentiable R (fun x : X => ‚Äñf x‚Äñ‚ÇÇ[R]) by
  intro x;
  have : ‚Äñf x‚Äñ‚ÇÇ¬≤[R] ‚â† 0 := sorry_proof
  fun_prop (disch:=aesop)


-- TODO: how can we streamline writing all of these theorems?

@[fun_trans]
theorem norm‚ÇÇ.arg_x.fderiv_rule_at (x : U) (hx : x ‚â† 0) :
    fderiv R (fun x : U => ‚Äñx‚Äñ‚ÇÇ[R]) x
    =
    fun dx =>L[R] ‚ü™dx,x‚ü´[R] / ‚Äñx‚Äñ‚ÇÇ[R] := by
  unfold norm‚ÇÇ;
  have : ‚Äñx‚Äñ‚ÇÇ¬≤[R] ‚â† 0 := sorry_proof
  fun_trans (disch:=assumption)
  ext dx; simp
  rw [‚Üê AdjointSpace.inner_conj_symm]
  simp; ring

@[fun_trans]
theorem norm‚ÇÇ.arg_x.fderiv_rule (f : X ‚Üí U) (hf : Differentiable R f) (hf' : ‚àÄ x, f x ‚â† 0) :
    fderiv R (fun x => ‚Äñf x‚Äñ‚ÇÇ[R])
    =
    fun x =>
      let y := f x
      fun dx =>L[R]
        let dy := fderiv R f x dx
        ‚ü™dy,y‚ü´[R] / ‚Äñy‚Äñ‚ÇÇ[R] := by
  funext x; fun_trans (disch:=aesop)

@[fun_trans]
theorem norm‚ÇÇ.arg_x.fwdFDeriv_rule_at (x : U) (hx : x ‚â† 0) :
    fwdFDeriv R (fun x : U => ‚Äñx‚Äñ‚ÇÇ[R]) x
    =
    fun dx =>
      let y := ‚Äñx‚Äñ‚ÇÇ[R]
      (y, ‚ü™dx,x‚ü´[R] / y) := by
  unfold fwdFDeriv; fun_trans (disch:=assumption)

@[fun_trans]
theorem norm‚ÇÇ.arg_x.fwdFDeriv_rule (f : X ‚Üí U) (hf : Differentiable R f) (hf' : ‚àÄ x, f x ‚â† 0) :
    fwdFDeriv R (fun x => ‚Äñf x‚Äñ‚ÇÇ[R])
    =
    fun x dx =>
      let ydy := fwdFDeriv R f x dx
      let yn := ‚Äñydy.1‚Äñ‚ÇÇ[R]
      (yn, ‚ü™ydy.2,ydy.1‚ü´[R] / yn) := by
  unfold fwdFDeriv; fun_trans (disch:=assumption)

@[fun_trans]
theorem norm‚ÇÇ.arg_x.revFDeriv_rule_at (x : U) (hx : x ‚â† 0) :
    revFDeriv R (fun x : U => ‚Äñx‚Äñ‚ÇÇ[R]) x
    =
    let y := ‚Äñx‚Äñ‚ÇÇ[R]
    (y, fun dy => (y‚Åª¬π * dy) ‚Ä¢ x) := by
  unfold revFDeriv; fun_trans (disch:=assumption) [smul_smul]


@[fun_trans]
theorem norm‚ÇÇ.arg_x.revFDeriv_rule (f : U ‚Üí V) (hf : Differentiable R f) (hf' : ‚àÄ x, f x ‚â† 0) :
    revFDeriv R (fun x : U => ‚Äñf x‚Äñ‚ÇÇ[R])
    =
    fun x =>
      let ydf := revFDeriv R f x
      let y := ‚Äñydf.1‚Äñ‚ÇÇ[R]
      (y, fun dy => ydf.2 ((y‚Åª¬π * dy) ‚Ä¢ ydf.1)) := by
  funext x; fun_trans (disch:=apply hf')


theorem norm‚ÇÇ_nonneg (R) [RealScalar R] {X} [NormedAddCommGroup X] [AdjointSpace R X] (x : X) :
    0 ‚â§ ‚Äñx‚Äñ‚ÇÇ¬≤[R] := by
  sorry_proof
